Problem Solving - input -> ....  ->output
somewhere in the middle is how to get the output

binary - 0's and 1's
unary - each finger of your hand is a digit and that's it...you can count up to 31. think of it as being fingers in up or down position. where thumb is one, pointer finger is two, thumb and pointer is three, middle finger is four, middle finger and thumb is five...etc.

base-2 (binary) - need just two digits or two words that can be used to represent something, like 0 an 1. 0 and 1 can be considered off and on. this is binary gits... ie bit. A bit is either a 0 or a 1. 

have to think of binary like base 10 where 123 is one hundred twenty three and this is 10(2) + 10(1) + 10(0) powers. but now we are doing 2(2) + 2(1) + 1(0) so for 123 we would have 100 * 1 + 10 *  2 + 1 * 3 = 123 

So instead of 100 place 10 place and 1 place we now for binary have the 4 place, the 2 place and the 1 place. 

To add in 8 now we need another slot. 2(3) which is 8. 


Byte - a byte is a larger unit of information composed of a gorup of 8 bits. 11111111 = 255 can also thing of this as 2 to the 8th power which is 256 but we also represent 0 so you subtract one which brings us to 255.


Now how do we represent letters.

We can assign letters to numbers as long as everyone agrees that a specific letter is represented by that number

ASCII - American Standard Code for Information Interchange
This is a standard that maps letters and characters and is standardized.

A - 65 - 010000001 <--- the letter, the base 10 number, the byte that shows this. 

There is some mapping for each letter of the alphabet in upper and lower case, then some symbols as well. This doesn't work for every language though as some languages have more than 256 characters to handle.

Emoji - are characters of the alphabet used to represent a face or symbol. But ultimately they are still characters so can be represented.

Unicode - is a superset of ASCII, using 8 bits to represent the aphabet isn't good so unicode uses sometimes 8, 16, 24, or 32 bits per character. So that's one byte, two byte or 3 bytes or 4 bytes. Can represent around 4 billion characters. 

Unicode's mission is to represent all human languages digitally past present and future. 
We don't represent unicode with 0's and 1's because it's to much. We use unicode's code point. It uses hexidecimal like U+1F602. The U+ is just a signal that this is a unicode character.

Colors of skin - Fitzpatrick scale from lighter to darker (5 tones). can think of this as modifying something that already exists rather than having to represent one emoji five times. Like U+1F602 U+1F3FD where the second part changes the skin tone. So basically more complex emojis can be created by putting these Unicode code points together to represent something. 

All of this is just context. Like we use numbers to represent so many different things where even RGB is 0-255, 0-255, 0-255. So 72, 73, 33 would be like a yellow color but in ASCII it means HI!. 

__________________________
Algorithm - step by step instruction for solving a problem.

Code is the implementation in computers of algorithms.

Need to be more efficient in how you solve a problem. Like searching for a name in a phone book where you search in the middle, then if not there you look at first or second half based on alphabet. You then go to half of that and try again...keep going until you get to the page that has the information.

Pseudocode - no formal meaning. Just write out the thoughts tersely but succinctly step by step. 

1 Pick up phone buook
2 Open to middle of book
3 look at page
4 if person is on page  
5   call person
6 else if person is earlier in book
7   open to middle of left half of book
8   go back to line 3 
9 else if person later in book
10  open to middle of right half of book
11  go back to line 3
12 else
13  quit <--- person not in the book so have to account for that